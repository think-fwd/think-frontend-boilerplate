frameworkVersion: "^3.33.0"

service: thinkcrm-web
useDotenv: true

plugins:
  - serverless-dotenv-plugin
  - serverless-export-outputs

provider:
  name: aws
  stage: ${opt:stage}
  environment:
    DOMAIN: ${env:DOMAIN}
    AWS_ACM_ARN: ${env:AWS_ACM_ARN}
    AWS_HOSTED_ZONE_ID: ${env:AWS_HOSTED_ZONE_ID}

params:
  default:
    DOMAIN: crm.${sls:stage}.${env:DOMAIN}
    BUCKET_NAME: crm.${sls:stage}.${env:DOMAIN}
  production:
    DOMAIN: crm.${env:DOMAIN}
    BUCKET_NAME: crm.${env:DOMAIN}

custom:
  exportOutputs:
    include:
      - CDNDistributionId
    output:
      file: ./sls-output.json
      format: json

resources:
  Resources:
    App:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:BUCKET_NAME}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
    S3AccessPolicy:
      DependsOn: App
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref App
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Principal: "*"
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref App
                  - /*
    CloudFrontOriginAccessIdentity:
      DependsOn: App
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: ${param:DOMAIN}
    CloudFrontDistribution:
      DependsOn: CloudFrontOriginAccessIdentity
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: ${param:DOMAIN}
              DomainName: !GetAtt App.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Join
                  - ""
                  - - "origin-access-identity/cloudfront/"
                    - !Ref CloudFrontOriginAccessIdentity
          Enabled: "true"
          Comment: ${param:DOMAIN}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ErrorCachingMinTTL: 10
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ErrorCachingMinTTL: 10
              ResponsePagePath: /index.html
          Aliases:
            - ${param:DOMAIN}
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ${param:DOMAIN}
            ForwardedValues:
              QueryString: "false"
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${env:AWS_ACM_ARN}
            MinimumProtocolVersion: TLSv1
            SslSupportMethod: sni-only
    DNSRecords:
      DependsOn: CloudFrontDistribution
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${env:AWS_HOSTED_ZONE_ID}
        RecordSets:
          - Name: ${param:DOMAIN}
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: !GetAtt CloudFrontDistribution.DomainName

  Outputs:
    CDNDistributionId:
      Description: CDN distribution id.
      Value:
        Ref: CloudFrontDistribution
