image: node:18

variables:
  # workspace
  DOMAIN: $DOMAIN
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_HOSTED_ZONE_ID: $AWS_HOSTED_ZONE_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  # repository
  REACT_APP_API_URL: $REACT_APP_API_URL
  REACT_APP_WSS_URL: $REACT_APP_WSS_URL

# <!-- run function definition before all steps and define vars
before_script:
  - function REPOSITORY_MSG { echo "- missing \$$1 on gitlab repository environment variables"; }
  - function WORKSPACE_MSG { echo "- missing \$$1 on gitlab workspace environment variables (contact the gitlab account owner)"; }
  - HASH=${CI_COMMIT_SHA:0:8}
  - VERSION=$(cat ./app/package.json | grep -m 1 version | sed 's/[^0-9.]//g')
  - FILENAME="thinkcrm-${HASH}-version-${VERSION}-build-${CI_PIPELINE_ID}"

stages:
  - validate
  - build
  - deploy
  - release

validate:
  stage: validate
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    # <!-- validate required environment variables -->
    - if [ -z $AWS_ACCESS_KEY_ID ]; then { set -- "$@" "$(WORKSPACE_MSG 'AWS_ACCESS_KEY_ID')"; } fi
    - if [ -z $AWS_SECRET_ACCESS_KEY ]; then { set -- "$@" "$(WORKSPACE_MSG 'AWS_SECRET_ACCESS_KEY')"; } fi
    - if [ -z $AWS_HOSTED_ZONE_ID ]; then { set -- "$@" "$(WORKSPACE_MSG 'AWS_HOSTED_ZONE_ID')"; } fi
    - if [ -z $DOMAIN ]; then { set -- "$@" "$(REPOSITORY_MSG 'DOMAIN')"; } fi
    - if [ -z $REACT_APP_API_URL ]; then { set -- "$@" "$(REPOSITORY_MSG 'REACT_APP_API_URL')"; } fi
    - if [ -z $REACT_APP_WSS_URL ]; then { set -- "$@" "$(REPOSITORY_MSG 'REACT_APP_WSS_URL')"; } fi
    - if [ -z $AWS_DEFAULT_REGION ]; then { set -- "$@" "$(REPOSITORY_MSG 'AWS_DEFAULT_REGION')"; } fi
    - if [ ${#@} -gt 0 ]; then { echo "<!-- VALIDATION ERRORS --->"; printf "%s\n" "$@"; exit 1; } fi
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "production"

build:
  stage: build
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    # <!-- move to app folder -->
    - cd app
    # <!-- mount reactjs environment variables -->
    - rm -rf .env
    - echo "REACT_APP_API_URL=${REACT_APP_API_URL}" >> .env
    - echo "REACT_APP_WSS_URL=${REACT_APP_WSS_URL}" >> .env
    - echo "REACT_APP_VERSION=${FILENAME}" >> .env
    # <!-- build reactjs application -->
    - yarn --dev --production=false
    - yarn build
  artifacts:
    name: "$FILENAME"
    paths:
      - app/build/
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "production"

deploy:
  stage: deploy
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    # <!-- install aws dependencies -->
    - apt update && apt -y install zip curl jq
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    # <!-- export required variables to deploy on aws -->
    - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    # <!-- install node dependencies -->
    - npm install -g serverless serverless-dotenv-plugin serverless-export-outputs
      # <!-- mount serverless environment variables -->
    - rm -rf .env
    - echo "DOMAIN=${DOMAIN}" >> .env
    - echo "AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}" >> .env
    # <!-- build cloud resources -->
    - serverless deploy --config serverless-cert.yml --stage ${CI_COMMIT_BRANCH} --region us-east-1 --verbose
    - SLS_WEBCERT_OUTPUT=$(cat sls-webcert-output.json)
    - $(echo "$SLS_WEBCERT_OUTPUT" | jq -r 'keys[] as $k | "export \($k)=\(.[$k])"')
    - echo "AWS_ACM_ARN=${CertificateDomainArn}" >> .env
    # <!-- import output variabls ACM ARN to ENV
    - serverless deploy --config serverless.yml --stage ${CI_COMMIT_BRANCH} --region ${AWS_DEFAULT_REGION} --verbose
  artifacts:
    paths:
      - sls-output.json
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "production"

release:
  stage: release
  environment:
    name: $CI_COMMIT_BRANCH
  script:
    # <!-- install aws dependencies -->
    - apt update && apt -y install zip curl jq
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    # <!-- upload built app artifact to aws s3 -->
    # -> reading 'app/build' artifact exported on 'build' step
    - S3_DOMAIN="crm.$([ "$CI_COMMIT_BRANCH" != "production" ] && echo "${CI_COMMIT_BRANCH}.")${DOMAIN}"
    - aws s3 sync app/build/ s3://$S3_DOMAIN
    # <!-- invalidate cloudfront -->
    # ---> load .sls-output artifact into ENV VARS
    # ---> It must contains the CDN_DISTRIBUTION_ID
    # ---> exported by serverless deploy on previous step
    - SLS_OUTPUT=$(cat sls-output.json)
    - $(echo "$SLS_OUTPUT" | jq -r 'keys[] as $k | "export \($k)=\(.[$k])"')
    # <!-- call aws cloudfront invalidation -->
    - aws cloudfront create-invalidation --distribution-id $CDNDistributionId --paths "/*"
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "production"
